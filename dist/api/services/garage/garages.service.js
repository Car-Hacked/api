"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../../common/logger"));

var _Garage = require("../../../common/models/Garage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GaragesService {
  async all() {
    _logger.default.info(`${this.constructor.name}.all()`);

    return _Garage.Garage.find({}, (e, r) => r).catch(error => error);
  }

  byId(id) {
    _logger.default.info(`${this.constructor.name}.byId(${id})`);

    return _Garage.Garage.findOne({
      _id: id
    }).catch(error => error);
  }

  async create(body) {
    _logger.default.info(`${this.constructor.name}.create()`);

    const garageConfig = {
      carsInLot: body.carsInLot || 0,
      capacity: body.capacity
    };
    const garage = await _Garage.Garage.create(garageConfig).catch(error => error);
    return garage;
  }

  async delete(id) {
    _logger.default.info(`delete ${this.constructor.name}.byId(${id})`);

    const result = await _Garage.Garage.deleteOne({
      _id: id
    }).catch(error => error);

    if (result instanceof Error) {
      return result;
    }

    const response = {
      message: `Garage with id ${id} and all associated data successfully removed!`,
      code: 'REMOVED'
    };
    return response;
  }

  async update(body) {
    _logger.default.info(`update ${this.constructor.name}.byId(${body._id})`);

    await _Garage.Garage.updateOne({
      _id: body._id
    }, body, {
      upsert: true
    }).catch(error => error);
    const garage = await _Garage.Garage.findOne({
      _id: body._id
    }).catch(error => error);

    if (garage) {
      garage.save();
      return garage;
    }

    return new Error("failed");
  }

}

var _default = new GaragesService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvc2VydmljZXMvZ2FyYWdlL2dhcmFnZXMuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJHYXJhZ2VzU2VydmljZSIsImFsbCIsImwiLCJpbmZvIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiR2FyYWdlIiwiZmluZCIsImUiLCJyIiwiY2F0Y2giLCJlcnJvciIsImJ5SWQiLCJpZCIsImZpbmRPbmUiLCJfaWQiLCJjcmVhdGUiLCJib2R5IiwiZ2FyYWdlQ29uZmlnIiwiY2Fyc0luTG90IiwiY2FwYWNpdHkiLCJnYXJhZ2UiLCJkZWxldGUiLCJyZXN1bHQiLCJkZWxldGVPbmUiLCJFcnJvciIsInJlc3BvbnNlIiwibWVzc2FnZSIsImNvZGUiLCJ1cGRhdGUiLCJ1cGRhdGVPbmUiLCJ1cHNlcnQiLCJzYXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxjQUFOLENBQXFCO0FBQ2pCLFFBQU1DLEdBQU4sR0FBWTtBQUNSQyxvQkFBRUMsSUFBRixDQUFRLEdBQUUsS0FBS0MsV0FBTCxDQUFpQkMsSUFBSyxRQUFoQzs7QUFDQSxXQUFPQyxlQUFPQyxJQUFQLENBQVksRUFBWixFQUFnQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUEsQ0FBMUIsRUFBNkJDLEtBQTdCLENBQW1DQyxLQUFLLElBQUlBLEtBQTVDLENBQVA7QUFDSDs7QUFFREMsRUFBQUEsSUFBSSxDQUFDQyxFQUFELEVBQUs7QUFDTFgsb0JBQUVDLElBQUYsQ0FBUSxHQUFFLEtBQUtDLFdBQUwsQ0FBaUJDLElBQUssU0FBUVEsRUFBRyxHQUEzQzs7QUFDQSxXQUFPUCxlQUFPUSxPQUFQLENBQWU7QUFBRUMsTUFBQUEsR0FBRyxFQUFFRjtBQUFQLEtBQWYsRUFBNEJILEtBQTVCLENBQWtDQyxLQUFLLElBQUlBLEtBQTNDLENBQVA7QUFDSDs7QUFFRCxRQUFNSyxNQUFOLENBQWFDLElBQWIsRUFBbUI7QUFDZmYsb0JBQUVDLElBQUYsQ0FBUSxHQUFFLEtBQUtDLFdBQUwsQ0FBaUJDLElBQUssV0FBaEM7O0FBQ0EsVUFBTWEsWUFBWSxHQUFHO0FBQ2pCQyxNQUFBQSxTQUFTLEVBQUVGLElBQUksQ0FBQ0UsU0FBTCxJQUFrQixDQURaO0FBRWpCQyxNQUFBQSxRQUFRLEVBQUVILElBQUksQ0FBQ0c7QUFGRSxLQUFyQjtBQUlBLFVBQU1DLE1BQU0sR0FBRyxNQUFNZixlQUFPVSxNQUFQLENBQWNFLFlBQWQsRUFBNEJSLEtBQTVCLENBQWtDQyxLQUFLLElBQUlBLEtBQTNDLENBQXJCO0FBQ0EsV0FBT1UsTUFBUDtBQUNIOztBQUVELFFBQU1DLE1BQU4sQ0FBYVQsRUFBYixFQUFpQjtBQUNiWCxvQkFBRUMsSUFBRixDQUFRLFVBQVMsS0FBS0MsV0FBTCxDQUFpQkMsSUFBSyxTQUFRUSxFQUFHLEdBQWxEOztBQUNBLFVBQU1VLE1BQU0sR0FBRyxNQUFNakIsZUFBT2tCLFNBQVAsQ0FBaUI7QUFBRVQsTUFBQUEsR0FBRyxFQUFFRjtBQUFQLEtBQWpCLEVBQThCSCxLQUE5QixDQUFvQ0MsS0FBSyxJQUFJQSxLQUE3QyxDQUFyQjs7QUFDQSxRQUFJWSxNQUFNLFlBQVlFLEtBQXRCLEVBQTRCO0FBQ3hCLGFBQU9GLE1BQVA7QUFDSDs7QUFDRCxVQUFNRyxRQUFRLEdBQUc7QUFBRUMsTUFBQUEsT0FBTyxFQUFHLGtCQUFpQmQsRUFBRyxnREFBaEM7QUFBaUZlLE1BQUFBLElBQUksRUFBRTtBQUF2RixLQUFqQjtBQUNBLFdBQU9GLFFBQVA7QUFDSDs7QUFFRCxRQUFNRyxNQUFOLENBQWFaLElBQWIsRUFBbUI7QUFDZmYsb0JBQUVDLElBQUYsQ0FBUSxVQUFTLEtBQUtDLFdBQUwsQ0FBaUJDLElBQUssU0FBUVksSUFBSSxDQUFDRixHQUFJLEdBQXhEOztBQUNBLFVBQU1ULGVBQU93QixTQUFQLENBQWlCO0FBQUVmLE1BQUFBLEdBQUcsRUFBRUUsSUFBSSxDQUFDRjtBQUFaLEtBQWpCLEVBQW9DRSxJQUFwQyxFQUEwQztBQUFFYyxNQUFBQSxNQUFNLEVBQUU7QUFBVixLQUExQyxFQUE0RHJCLEtBQTVELENBQWtFQyxLQUFLLElBQUlBLEtBQTNFLENBQU47QUFDQSxVQUFNVSxNQUFNLEdBQUcsTUFBTWYsZUFBT1EsT0FBUCxDQUFlO0FBQUVDLE1BQUFBLEdBQUcsRUFBRUUsSUFBSSxDQUFDRjtBQUFaLEtBQWYsRUFBa0NMLEtBQWxDLENBQXdDQyxLQUFLLElBQUlBLEtBQWpELENBQXJCOztBQUNBLFFBQUdVLE1BQUgsRUFBVztBQUNQQSxNQUFBQSxNQUFNLENBQUNXLElBQVA7QUFDQSxhQUFPWCxNQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFJSSxLQUFKLENBQVUsUUFBVixDQUFQO0FBQ0g7O0FBeENnQjs7ZUEyQ04sSUFBSXpCLGNBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9sb2dnZXInO1xuaW1wb3J0IHsgR2FyYWdlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVscy9HYXJhZ2UnO1xuXG5jbGFzcyBHYXJhZ2VzU2VydmljZSB7XG4gICAgYXN5bmMgYWxsKCkge1xuICAgICAgICBsLmluZm8oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5hbGwoKWApO1xuICAgICAgICByZXR1cm4gR2FyYWdlLmZpbmQoe30sIChlLCByKSA9PiByKS5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gICAgfVxuXG4gICAgYnlJZChpZCkge1xuICAgICAgICBsLmluZm8oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5ieUlkKCR7aWR9KWApO1xuICAgICAgICByZXR1cm4gR2FyYWdlLmZpbmRPbmUoeyBfaWQ6IGlkIH0pLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGUoYm9keSkge1xuICAgICAgICBsLmluZm8oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5jcmVhdGUoKWApO1xuICAgICAgICBjb25zdCBnYXJhZ2VDb25maWcgPSB7XG4gICAgICAgICAgICBjYXJzSW5Mb3Q6IGJvZHkuY2Fyc0luTG90IHx8IDAsXG4gICAgICAgICAgICBjYXBhY2l0eTogYm9keS5jYXBhY2l0eVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBnYXJhZ2UgPSBhd2FpdCBHYXJhZ2UuY3JlYXRlKGdhcmFnZUNvbmZpZykuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgICAgICByZXR1cm4gZ2FyYWdlO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShpZCkge1xuICAgICAgICBsLmluZm8oYGRlbGV0ZSAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uYnlJZCgke2lkfSlgKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgR2FyYWdlLmRlbGV0ZU9uZSh7IF9pZDogaWQgfSkuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3Ipe1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHsgbWVzc2FnZTogYEdhcmFnZSB3aXRoIGlkICR7aWR9IGFuZCBhbGwgYXNzb2NpYXRlZCBkYXRhIHN1Y2Nlc3NmdWxseSByZW1vdmVkIWAsIGNvZGU6ICdSRU1PVkVEJyB9O1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlKGJvZHkpIHtcbiAgICAgICAgbC5pbmZvKGB1cGRhdGUgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmJ5SWQoJHtib2R5Ll9pZH0pYCk7XG4gICAgICAgIGF3YWl0IEdhcmFnZS51cGRhdGVPbmUoeyBfaWQ6IGJvZHkuX2lkIH0sIGJvZHksIHsgdXBzZXJ0OiB0cnVlIH0pLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICAgICAgY29uc3QgZ2FyYWdlID0gYXdhaXQgR2FyYWdlLmZpbmRPbmUoeyBfaWQ6IGJvZHkuX2lkIH0pLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICAgICAgaWYoZ2FyYWdlKSB7XG4gICAgICAgICAgICBnYXJhZ2Uuc2F2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGdhcmFnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiZmFpbGVkXCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IEdhcmFnZXNTZXJ2aWNlKCk7XG4iXX0=