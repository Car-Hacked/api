"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../../common/logger"));

var _Garage = require("../../../common/models/Garage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GaragesService {
  async all() {
    _logger.default.info(`${this.constructor.name}.all()`);

    const result = await _Garage.Garage.find({}, (e, r) => r).catch(error => error);
    return result;
  }

  byId(id) {
    _logger.default.info(`${this.constructor.name}.byId(${id})`);

    return _Garage.Garage.findOne({
      _id: id
    }).catch(error => error);
  }

  async create(body) {
    _logger.default.info(`${this.constructor.name}.create()`);

    const garageConfig = {
      garageName: body.garageName,
      address: body.address,
      carsInLot: body.carsInLot || 0,
      capacity: body.capacity
    };
    const garage = await _Garage.Garage.create(garageConfig).catch(error => error);
    return garage;
  }

  async delete(id) {
    _logger.default.info(`delete ${this.constructor.name}.byId(${id})`);

    const result = await _Garage.Garage.deleteOne({
      _id: id
    }).catch(error => error);

    if (result instanceof Error) {
      return result;
    }

    const response = {
      message: `Garage with id ${id} and all associated data successfully removed!`,
      code: 'REMOVED'
    };
    return response;
  }

  async update(body) {
    _logger.default.info(`update ${this.constructor.name}.byId(${body._id})`);

    await _Garage.Garage.updateOne({
      _id: body._id
    }, body, {
      upsert: true
    }).catch(error => error);
    const garage = await _Garage.Garage.findOne({
      _id: body._id
    }).catch(error => error);

    if (garage) {
      garage.save();
      return garage;
    }

    return new Error("failed");
  }

}

var _default = new GaragesService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvc2VydmljZXMvZ2FyYWdlL2dhcmFnZXMuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJHYXJhZ2VzU2VydmljZSIsImFsbCIsImwiLCJpbmZvIiwiY29uc3RydWN0b3IiLCJuYW1lIiwicmVzdWx0IiwiR2FyYWdlIiwiZmluZCIsImUiLCJyIiwiY2F0Y2giLCJlcnJvciIsImJ5SWQiLCJpZCIsImZpbmRPbmUiLCJfaWQiLCJjcmVhdGUiLCJib2R5IiwiZ2FyYWdlQ29uZmlnIiwiZ2FyYWdlTmFtZSIsImFkZHJlc3MiLCJjYXJzSW5Mb3QiLCJjYXBhY2l0eSIsImdhcmFnZSIsImRlbGV0ZSIsImRlbGV0ZU9uZSIsIkVycm9yIiwicmVzcG9uc2UiLCJtZXNzYWdlIiwiY29kZSIsInVwZGF0ZSIsInVwZGF0ZU9uZSIsInVwc2VydCIsInNhdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLGNBQU4sQ0FBcUI7QUFDakIsUUFBTUMsR0FBTixHQUFZO0FBQ1JDLG9CQUFFQyxJQUFGLENBQVEsR0FBRSxLQUFLQyxXQUFMLENBQWlCQyxJQUFLLFFBQWhDOztBQUNBLFVBQU1DLE1BQU0sR0FBRyxNQUFNQyxlQUFPQyxJQUFQLENBQVksRUFBWixFQUFnQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUEsQ0FBMUIsRUFBNkJDLEtBQTdCLENBQW1DQyxLQUFLLElBQUlBLEtBQTVDLENBQXJCO0FBQ0EsV0FBT04sTUFBUDtBQUNIOztBQUVETyxFQUFBQSxJQUFJLENBQUNDLEVBQUQsRUFBSztBQUNMWixvQkFBRUMsSUFBRixDQUFRLEdBQUUsS0FBS0MsV0FBTCxDQUFpQkMsSUFBSyxTQUFRUyxFQUFHLEdBQTNDOztBQUNBLFdBQU9QLGVBQU9RLE9BQVAsQ0FBZTtBQUFFQyxNQUFBQSxHQUFHLEVBQUVGO0FBQVAsS0FBZixFQUE0QkgsS0FBNUIsQ0FBa0NDLEtBQUssSUFBSUEsS0FBM0MsQ0FBUDtBQUNIOztBQUVELFFBQU1LLE1BQU4sQ0FBYUMsSUFBYixFQUFtQjtBQUNmaEIsb0JBQUVDLElBQUYsQ0FBUSxHQUFFLEtBQUtDLFdBQUwsQ0FBaUJDLElBQUssV0FBaEM7O0FBQ0EsVUFBTWMsWUFBWSxHQUFHO0FBQ2pCQyxNQUFBQSxVQUFVLEVBQUVGLElBQUksQ0FBQ0UsVUFEQTtBQUVqQkMsTUFBQUEsT0FBTyxFQUFFSCxJQUFJLENBQUNHLE9BRkc7QUFHakJDLE1BQUFBLFNBQVMsRUFBRUosSUFBSSxDQUFDSSxTQUFMLElBQWtCLENBSFo7QUFJakJDLE1BQUFBLFFBQVEsRUFBRUwsSUFBSSxDQUFDSztBQUpFLEtBQXJCO0FBTUEsVUFBTUMsTUFBTSxHQUFHLE1BQU1qQixlQUFPVSxNQUFQLENBQWNFLFlBQWQsRUFBNEJSLEtBQTVCLENBQWtDQyxLQUFLLElBQUlBLEtBQTNDLENBQXJCO0FBQ0EsV0FBT1ksTUFBUDtBQUNIOztBQUVELFFBQU1DLE1BQU4sQ0FBYVgsRUFBYixFQUFpQjtBQUNiWixvQkFBRUMsSUFBRixDQUFRLFVBQVMsS0FBS0MsV0FBTCxDQUFpQkMsSUFBSyxTQUFRUyxFQUFHLEdBQWxEOztBQUNBLFVBQU1SLE1BQU0sR0FBRyxNQUFNQyxlQUFPbUIsU0FBUCxDQUFpQjtBQUFFVixNQUFBQSxHQUFHLEVBQUVGO0FBQVAsS0FBakIsRUFBOEJILEtBQTlCLENBQW9DQyxLQUFLLElBQUlBLEtBQTdDLENBQXJCOztBQUNBLFFBQUlOLE1BQU0sWUFBWXFCLEtBQXRCLEVBQTRCO0FBQ3hCLGFBQU9yQixNQUFQO0FBQ0g7O0FBQ0QsVUFBTXNCLFFBQVEsR0FBRztBQUFFQyxNQUFBQSxPQUFPLEVBQUcsa0JBQWlCZixFQUFHLGdEQUFoQztBQUFpRmdCLE1BQUFBLElBQUksRUFBRTtBQUF2RixLQUFqQjtBQUNBLFdBQU9GLFFBQVA7QUFDSDs7QUFFRCxRQUFNRyxNQUFOLENBQWFiLElBQWIsRUFBbUI7QUFDZmhCLG9CQUFFQyxJQUFGLENBQVEsVUFBUyxLQUFLQyxXQUFMLENBQWlCQyxJQUFLLFNBQVFhLElBQUksQ0FBQ0YsR0FBSSxHQUF4RDs7QUFDQSxVQUFNVCxlQUFPeUIsU0FBUCxDQUFpQjtBQUFFaEIsTUFBQUEsR0FBRyxFQUFFRSxJQUFJLENBQUNGO0FBQVosS0FBakIsRUFBb0NFLElBQXBDLEVBQTBDO0FBQUVlLE1BQUFBLE1BQU0sRUFBRTtBQUFWLEtBQTFDLEVBQTREdEIsS0FBNUQsQ0FBa0VDLEtBQUssSUFBSUEsS0FBM0UsQ0FBTjtBQUNBLFVBQU1ZLE1BQU0sR0FBRyxNQUFNakIsZUFBT1EsT0FBUCxDQUFlO0FBQUVDLE1BQUFBLEdBQUcsRUFBRUUsSUFBSSxDQUFDRjtBQUFaLEtBQWYsRUFBa0NMLEtBQWxDLENBQXdDQyxLQUFLLElBQUlBLEtBQWpELENBQXJCOztBQUNBLFFBQUdZLE1BQUgsRUFBVztBQUNQQSxNQUFBQSxNQUFNLENBQUNVLElBQVA7QUFDQSxhQUFPVixNQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFJRyxLQUFKLENBQVUsUUFBVixDQUFQO0FBQ0g7O0FBM0NnQjs7ZUE4Q04sSUFBSTNCLGNBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9sb2dnZXInO1xuaW1wb3J0IHsgR2FyYWdlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVscy9HYXJhZ2UnO1xuXG5jbGFzcyBHYXJhZ2VzU2VydmljZSB7XG4gICAgYXN5bmMgYWxsKCkge1xuICAgICAgICBsLmluZm8oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5hbGwoKWApO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBHYXJhZ2UuZmluZCh7fSwgKGUsIHIpID0+IHIpLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBieUlkKGlkKSB7XG4gICAgICAgIGwuaW5mbyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmJ5SWQoJHtpZH0pYCk7XG4gICAgICAgIHJldHVybiBHYXJhZ2UuZmluZE9uZSh7IF9pZDogaWQgfSkuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZShib2R5KSB7XG4gICAgICAgIGwuaW5mbyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmNyZWF0ZSgpYCk7XG4gICAgICAgIGNvbnN0IGdhcmFnZUNvbmZpZyA9IHtcbiAgICAgICAgICAgIGdhcmFnZU5hbWU6IGJvZHkuZ2FyYWdlTmFtZSxcbiAgICAgICAgICAgIGFkZHJlc3M6IGJvZHkuYWRkcmVzcyxcbiAgICAgICAgICAgIGNhcnNJbkxvdDogYm9keS5jYXJzSW5Mb3QgfHwgMCxcbiAgICAgICAgICAgIGNhcGFjaXR5OiBib2R5LmNhcGFjaXR5XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGdhcmFnZSA9IGF3YWl0IEdhcmFnZS5jcmVhdGUoZ2FyYWdlQ29uZmlnKS5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gICAgICAgIHJldHVybiBnYXJhZ2U7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlKGlkKSB7XG4gICAgICAgIGwuaW5mbyhgZGVsZXRlICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5ieUlkKCR7aWR9KWApO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBHYXJhZ2UuZGVsZXRlT25lKHsgX2lkOiBpZCB9KS5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcil7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyBtZXNzYWdlOiBgR2FyYWdlIHdpdGggaWQgJHtpZH0gYW5kIGFsbCBhc3NvY2lhdGVkIGRhdGEgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQhYCwgY29kZTogJ1JFTU9WRUQnIH07XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGUoYm9keSkge1xuICAgICAgICBsLmluZm8oYHVwZGF0ZSAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uYnlJZCgke2JvZHkuX2lkfSlgKTtcbiAgICAgICAgYXdhaXQgR2FyYWdlLnVwZGF0ZU9uZSh7IF9pZDogYm9keS5faWQgfSwgYm9keSwgeyB1cHNlcnQ6IHRydWUgfSkuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgICAgICBjb25zdCBnYXJhZ2UgPSBhd2FpdCBHYXJhZ2UuZmluZE9uZSh7IF9pZDogYm9keS5faWQgfSkuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgICAgICBpZihnYXJhZ2UpIHtcbiAgICAgICAgICAgIGdhcmFnZS5zYXZlKCk7XG4gICAgICAgICAgICByZXR1cm4gZ2FyYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJmYWlsZWRcIik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgR2FyYWdlc1NlcnZpY2UoKTtcbiJdfQ==