"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _garages = _interopRequireDefault(require("../../services/garage/garages.service"));

var _me = _interopRequireDefault(require("../../services/me.service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  all(req, res) {
    _garages.default.all().then(r => res.json(r));
  }

  byId(req, res) {
    _garages.default.byId(req.params.id).then(r => {
      if (r) res.json(r);else res.status(404).end();
    });
  }

  async create(req, res) {
    const user = await _me.default.me(req).catch(error => error);

    if (user instanceof Error && 'code' in user && user.code === 'NOT_AUTH') {
      return res.status(401).json(user);
    } else if (user instanceof Error) {
      l.error(user);
      return res.status(500).json({
        error: 'An internal server error occured!',
        code: 'INTERNAL'
      });
    }

    _garages.default.create(req.body).then(r => res.status(201).location(`/api/v1/examples/${r.id}`).json(r));
  }

  async delete(req, res) {
    const user = await _me.default.me(req).catch(error => error);

    if (user instanceof Error && 'code' in user && user.code === 'NOT_AUTH') {
      return res.status(401).json(user);
    } else if (user instanceof Error) {
      l.error(user);
      return res.status(500).json({
        error: 'An internal server error occured!',
        code: 'INTERNAL'
      });
    }

    _garages.default.delete(req.params.id).then(r => {
      if (r) res.json(r);else res.status(404).end();
    });
  }

  async update(req, res) {
    const user = await _me.default.me(req).catch(error => error);

    if (user instanceof Error && 'code' in user && user.code === 'NOT_AUTH') {
      return res.status(401).json(user);
    } else if (user instanceof Error) {
      l.error(user);
      return res.status(500).json({
        error: 'An internal server error occured!',
        code: 'INTERNAL'
      });
    }

    _garages.default.update(req.body).then(r => {
      if (r) res.json(r);else res.status(404).end();
    });
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvY29udHJvbGxlcnMvZ2FyYWdlL2NvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiQ29udHJvbGxlciIsImFsbCIsInJlcSIsInJlcyIsIkdhcmFnZXNTZXJ2aWNlIiwidGhlbiIsInIiLCJqc29uIiwiYnlJZCIsInBhcmFtcyIsImlkIiwic3RhdHVzIiwiZW5kIiwiY3JlYXRlIiwidXNlciIsIk1lU2VydmljZSIsIm1lIiwiY2F0Y2giLCJlcnJvciIsIkVycm9yIiwiY29kZSIsImwiLCJib2R5IiwibG9jYXRpb24iLCJkZWxldGUiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVPLE1BQU1BLFVBQU4sQ0FBaUI7QUFDcEJDLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDVkMscUJBQWVILEdBQWYsR0FBcUJJLElBQXJCLENBQTBCQyxDQUFDLElBQUlILEdBQUcsQ0FBQ0ksSUFBSixDQUFTRCxDQUFULENBQS9CO0FBQ0g7O0FBRURFLEVBQUFBLElBQUksQ0FBQ04sR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDWEMscUJBQWVJLElBQWYsQ0FBb0JOLEdBQUcsQ0FBQ08sTUFBSixDQUFXQyxFQUEvQixFQUFtQ0wsSUFBbkMsQ0FBd0NDLENBQUMsSUFBSTtBQUN6QyxVQUFJQSxDQUFKLEVBQU9ILEdBQUcsQ0FBQ0ksSUFBSixDQUFTRCxDQUFULEVBQVAsS0FDS0gsR0FBRyxDQUFDUSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsR0FBaEI7QUFDUixLQUhEO0FBSUg7O0FBRUQsUUFBTUMsTUFBTixDQUFhWCxHQUFiLEVBQWtCQyxHQUFsQixFQUF1QjtBQUNuQixVQUFNVyxJQUFJLEdBQUcsTUFBTUMsWUFBVUMsRUFBVixDQUFhZCxHQUFiLEVBQWtCZSxLQUFsQixDQUF3QkMsS0FBSyxJQUFJQSxLQUFqQyxDQUFuQjs7QUFDQSxRQUFJSixJQUFJLFlBQVlLLEtBQWhCLElB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Q0MsQ0FBQyxJQUFJO0FBQ3RDLFVBQUlBLENBQUosRUFBT0gsR0FBRyxDQUFDSSxJQUFKLENBQVNELENBQVQsRUFBUCxLQUNLSCxHQUFHLENBQUNRLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxHQUFoQjtBQUNSLEtBSEQ7QUFJSDs7QUE1RG1COzs7O2VBOERULElBQUlaLFVBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHYXJhZ2VzU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9nYXJhZ2UvZ2FyYWdlcy5zZXJ2aWNlJztcbmltcG9ydCBNZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvbWUuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcbiAgICBhbGwocmVxLCByZXMpIHtcbiAgICAgICAgR2FyYWdlc1NlcnZpY2UuYWxsKCkudGhlbihyID0+IHJlcy5qc29uKHIpKTtcbiAgICB9XG5cbiAgICBieUlkKHJlcSwgcmVzKSB7XG4gICAgICAgIEdhcmFnZXNTZXJ2aWNlLmJ5SWQocmVxLnBhcmFtcy5pZCkudGhlbihyID0+IHtcbiAgICAgICAgICAgIGlmIChyKSByZXMuanNvbihyKTtcbiAgICAgICAgICAgIGVsc2UgcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGUocmVxLCByZXMpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IE1lU2VydmljZS5tZShyZXEpLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICAgICAgaWYgKHVzZXIgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gdXNlciAmJiB1c2VyLmNvZGUgPT09ICdOT1RfQVVUSCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih1c2VyKTtcbiAgICAgICAgfSBlbHNlIGlmICh1c2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIGwuZXJyb3IodXNlcik7XG4gICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAgICAgICAgICAgLmpzb24oeyBlcnJvcjogJ0FuIGludGVybmFsIHNlcnZlciBlcnJvciBvY2N1cmVkIScsIGNvZGU6ICdJTlRFUk5BTCcgfSk7XG4gICAgICAgIH1cbiAgICAgICAgR2FyYWdlc1NlcnZpY2UuY3JlYXRlKHJlcS5ib2R5KS50aGVuKHIgPT5cbiAgICAgICAgICAgIHJlc1xuICAgICAgICAgICAgICAgIC5zdGF0dXMoMjAxKVxuICAgICAgICAgICAgICAgIC5sb2NhdGlvbihgL2FwaS92MS9leGFtcGxlcy8ke3IuaWR9YClcbiAgICAgICAgICAgICAgICAuanNvbihyKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShyZXEsIHJlcykge1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgTWVTZXJ2aWNlLm1lKHJlcSkuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICAgICAgICBpZiAodXNlciBpbnN0YW5jZW9mIEVycm9yICYmICdjb2RlJyBpbiB1c2VyICYmIHVzZXIuY29kZSA9PT0gJ05PVF9BVVRIJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHVzZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHVzZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgbC5lcnJvcih1c2VyKTtcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgICAgICAuc3RhdHVzKDUwMClcbiAgICAgICAgICAgICAgICAuanNvbih7IGVycm9yOiAnQW4gaW50ZXJuYWwgc2VydmVyIGVycm9yIG9jY3VyZWQhJywgY29kZTogJ0lOVEVSTkFMJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBHYXJhZ2VzU2VydmljZS5kZWxldGUocmVxLnBhcmFtcy5pZCkudGhlbihyID0+IHtcbiAgICAgICAgICAgIGlmIChyKSByZXMuanNvbihyKTtcbiAgICAgICAgICAgIGVsc2UgcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGUocmVxLCByZXMpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IE1lU2VydmljZS5tZShyZXEpLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgICAgICAgaWYgKHVzZXIgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gdXNlciAmJiB1c2VyLmNvZGUgPT09ICdOT1RfQVVUSCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih1c2VyKTtcbiAgICAgICAgfSBlbHNlIGlmICh1c2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIGwuZXJyb3IodXNlcik7XG4gICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAgICAgICAgICAgLmpzb24oeyBlcnJvcjogJ0FuIGludGVybmFsIHNlcnZlciBlcnJvciBvY2N1cmVkIScsIGNvZGU6ICdJTlRFUk5BTCcgfSk7XG4gICAgICAgIH1cbiAgICAgICAgR2FyYWdlc1NlcnZpY2UudXBkYXRlKHJlcS5ib2R5KS50aGVuKHIgPT4ge1xuICAgICAgICAgICAgaWYgKHIpIHJlcy5qc29uKHIpO1xuICAgICAgICAgICAgZWxzZSByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb250cm9sbGVyKCk7Il19