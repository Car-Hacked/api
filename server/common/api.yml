openapi: 3.0.1
info:
  title: hackmt-2020
  description: hackmt-2020 project
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: Users
    description: Simple example endpoints
  - name: Garages
    description: Simple garage endpoints
  - name: Specification
    description: The swagger API specification
paths:
  /login:
    post:
      tags:
      - Users
      description: Login
      requestBody:
        description: a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBody'
      responses:
        201:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        4XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      tags:
        - Users
      description: Create a new User
      requestBody:
        description: a User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        201:
          description: Return the user with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      security:
        - ApiKeyAuth: []
      tags:
        - Users
      description: Patch a User
      requestBody:
        description: a User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        201:
          description: Return the user with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Users
      description: Remove a User
      requestBody:
        description: a User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        201:
          description: Return the user with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /garages:
    get:
      tags:
        - Garages
      description: Fetch all garages
      responses:
        200:
          description: Return the garage with the specified id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Garage'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Garages
      description: Create a new Garage
      requestBody:
        description: a garage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GarageBody'
        required: true
      responses:
        201:
          description: Return the example with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      security:
        - ApiKeyAuth: []
      tags:
        - Garages
      description: Edit a Garage
      requestBody:
        description: a garage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBody'
        required: true
      responses:
        201:
          description: Return the example with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /garages/{id}:
    get:
      tags:
        - Garages
      parameters:
        - name: id
          in: path
          description: The id of the garage to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the garage with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
        4XX:
          description: Garage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Garage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Garages
      parameters:
        - name: id
          in: path
          description: The id of the garage to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete the garage with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
        4XX:
          description: Garage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Garage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: accesstoken
  schemas:
    Example:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: example 3
    Garage:
      type: object
      properties:
        carsInLot:
          type: integer
          example: 3
        capacity:
          type: integer
          example: 500
    User:
      type: object
      title: User
      required:
        - username
      properties:
        username:
          type: string
          example: yoloman1
    Error:
      type: object
      additionalProperties: true

    ExampleBody:
      title: example
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: no_stress

    GarageBody:
      title: garage
      required:
        - garageName
        - capacity
      type: object
      properties:
        garageName:
          type: string
          example: Parking-Lot 5
        address:
          type: string
          example: 1803 15th Ave S, 37212 Nashville, TN
        carsInLot:
          type: integer
          example: 3
        capacity:
          type: integer
          example: 500

    UserBody:
      type: object
      title: User
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: yoloman1
          description: Only alphanumeric characters and underscore allowed.
        password:
          type: string
          example: some protected string

    UserCreate:
      type: object
      title: User
      required:
        - username
        - password
        - secret
      properties:
        username:
          type: string
          example: yoloman1
          description: Only alphanumeric characters and underscore allowed.
        password:
          type: string
          example: some protected string
        secret:
          type: string
          example: company secret

    UpdateUser:
      type: object
      title: User
      required:
        - id
        - username
      properties:
        id:
          type: string
        username:
          type: string
          example: yoloman1
          description: Only alphanumeric characters and underscore allowed.

    UpdateBody:
      title: garage
      required:
        - _id
      type: object
      properties:
        _id:
          type: string
        carsInLot:
          type: integer
          example: 3
        capacity:
          type: integer
          example: 500
